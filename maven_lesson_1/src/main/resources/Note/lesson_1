1.Maven 介绍
    Maven 工程结构和内容被定义在一个 xml 文件中 － pom.xml，是 Project Object Model (POM) 的
    简称，此文件是整个 Maven 系统的基础组件
2.环境配置
    jdk依赖：
        Maven 3.3 要求 JDK 1.7 或以上
        Maven 3.2 要求 JDK 1.6 或以上
        Maven 3.0/3.1 要求 JDK 1.5 或以上
    环境变量：
        M2_HOME=C:\Program Files\Apache Software Foundation\apache-maven-3.2.5
        M2=%M2_HOME%\bin
        MAVEN_OPTS=-Xms256m -Xmx512m
        PATH 加入  %M2%; 注意加分号和分号的格式
    检测：
        mvn --version
3.POM配置文件
    !根节点
        project
    !三个必须子节点
        所有的 POM 文件需要 project 元素和三个必须的字段：groupId,artifactId,version
        在仓库中的工程标识为 groupId:artifactId:version
        groupId
            这是工程组的标识。它在一个组织或者项目中通常是唯一的。
                例如，一个银行组织 com.company.bank 拥有所有的和银行相关的项目。
        artifactId
            这是工程的标识。它通常是工程的名称。
                例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。
        version
            这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。
                例如：
                    com.company.bank:consumer-banking:1.0
                    com.company.bank:consumer-banking:1.1

        modelVersion ： 模型版本，必须设置为4.0
    !其他节点：
        !!父项目的坐标
            <parent>
                <artifactId />
                    父项目的artifactId
                <groupId />
                    父项目的groupId
                <version />
                    父项目的版本
                <relativePath /> ：
                    父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。
                        Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），
                        然后在本地仓库，最后在远程仓库寻找父项目的pom。
            </parent>
            <packaging>jar</packaging>
                项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型

        !!信息、文档以及环境配置

            <name>banseon-maven</name>
                项目名称，maven文档中的项目名称
            <url>http://www.baidu.com/banseon</url>
                项目的详细描述，文档使用
            <description>A maven project to study maven.</description>
                项目描述
            <prerequisites>  描述了这个项目构建环境中的前提条件
                <!--构建该项目或使用该插件所需要的Maven的最低版本 -->
                <maven />
            </prerequisites>
            项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira
                <issueManagement>
                    <system>jira</system>
                        问题管理系统（例如jira）的名字
                    <url>http://jira.baidu.com/banseon</url>
                        该项目使用的问题管理系统的URL
                </issueManagement>
            <ciManagement>
                <!--持续集成系统的名字，例如continuum -->
                <system></system>
                <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 -->
                <url></url>
                <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） -->
                <notifiers>
                    <!--配置一种方式，当构建中断时，以该方式通知用户/开发者 -->
                    <notifier>
                        <!--传送通知的途径 -->
                        <type />
                        <!--发生错误时是否通知 -->
                        <sendOnError />
                        <!--构建失败时是否通知 -->
                        <sendOnFailure />
                        <!--构建成功时是否通知 -->
                        <sendOnSuccess />
                        <!--发生警告时是否通知 -->
                        <sendOnWarning />
                        <!--不赞成使用。通知发送到哪里 -->
                        <address />
                        <!--扩展配置项 -->
                        <configuration />
                    </notifier>
                </notifiers>
            </ciManagement>
                实例：
                    <system>continuum</system>
                    <url>http://127.0.0.1:8080/continuum</url>
                    <notifiers>
                        <notifier>
                            <type>mail</type>
                            <sendOnError>true</sendOnError>
                            <sendOnFailure>true</sendOnFailure>
                            <sendOnSuccess>false</sendOnSuccess>
                            <sendOnWarning>false</sendOnWarning>
                            <configuration><address>continuum@127.0.0.1</address></configuration>
                        </notifier>
                    </notifiers>
            项目创建年份，4位数字。当产生版权信息时需要使用这个值。
                <inceptionYear />
            项目相关邮件列表信息
                <mailingLists>
                    该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。
                    <mailingList>
                        <!--邮件的名称 -->
                        <name>Demo</name>
                        <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
                        <post>banseon@126.com</post>
                        <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
                        <subscribe>banseon@126.com</subscribe>
                        <!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
                        <unsubscribe>banseon@126.com</unsubscribe>
                        <!--你可以浏览邮件信息的URL -->
                        <archive>http:/hi.baidu.com/banseon/demo/dev/</archive>
                    </mailingList>
                </mailingLists>
            项目开发者列表
                <developers>
                    <!--某个项目开发者的信息 -->
                    <developer>
                        <!--SCM里项目开发者的唯一标识符 -->
                        <id>HELLO WORLD</id>
                        <!--项目开发者的全名 -->
                        <name>banseon</name>
                        <!--项目开发者的email -->
                        <email>banseon@126.com</email>
                        <!--项目开发者的主页的URL -->
                        <url />
                        <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->
                        <roles>
                            <role>Project Manager</role>
                            <role>Architect</role>
                        </roles>
                        <!--项目开发者所属组织 -->
                        <organization>demo</organization>
                        <!--项目开发者所属组织的URL -->
                        <organizationUrl>http://hi.baidu.com/banseon</organizationUrl>
                        <!--项目开发者属性，如即时消息如何处理等 -->
                        <properties>
                            <dept>No</dept>
                        </properties>
                        <!--项目开发者所在时区， -11到12范围内的整数。 -->
                        <timezone>-5</timezone>
                    </developer>
                </developers>
            项目的其他贡献者列表
                <contributors>
                    <!--项目的其他贡献者。参见developers/developer元素 -->
                    <contributor>
                        <name />
                        <email />
                        <url />
                        <organization />
                        <organizationUrl />
                        <roles />
                        <timezone />
                        <properties />
                    </contributor>
                </contributors>
            只接受一个许可证
                <licenses>
                    描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素
                    <license>
                        <!--license用于法律上的名称 -->
                        <name>Apache 2</name>
                        <!--官方的license正文页面的URL -->
                        <url>http://www.baidu.com/banseon/LICENSE-2.0.txt</url>
                        <!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 -->
                        <distribution>repo</distribution>
                        <!--关于license的补充信息 -->
                        <comments>A business-friendly OSS license</comments>
                    </license>
                </licenses>
            SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。
                <scm>
                    <!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 -->
                    <connection>
                        scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
                    </connection>
                    <!--给开发者使用的，类似connection元素。即该连接不仅仅只读 -->
                    <developerConnection>
                        scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
                    </developerConnection>
                    <!--当前代码的标签，在开发阶段默认为HEAD -->
                    <tag />
                    <!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 -->
                    <url>http://svn.baidu.com/banseon</url>
                </scm>
            描述项目所属组织的各种属性。Maven产生的文档用
                <organization>
                    <!--组织的全名 -->
                    <name>demo</name>
                    <!--组织主页的URL -->
                    <url>http://www.baidu.com/banseon</url>
                </organization>

        !!构建配置

            构建项目需要的信息
            <build>··
                该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。
                    MAVEN 会自动按照约定目录，进行编译
                <sourceDirectory />
                该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录
                    (因为脚本是被解释的，而不是被编译的)。
                一般WebRoot下的页面文件、脚本文件、脚本库文件、模板文件......
                <scriptSourceDirectory />
                该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。
                    该路径是相对于pom.xml的相对路径。
                <testSourceDirectory />
                被编译过的应用程序class文件存放的目录。
                <outputDirectory />
                被编译过的测试class文件存放的目录。
                <testOutputDirectory />
                使用来自该项目的一系列构建扩展
                    <extensions>
                        <!--描述使用到的构建扩展。 -->
                        <extension>
                            <!--构建扩展的groupId -->
                            <groupId />
                            <!--构建扩展的artifactId -->
                            <artifactId />
                            <!--构建扩展的版本 -->
                            <version />
                        </extension>
                    </extensions>
                当项目没有规定目标（Maven2 叫做阶段）时的默认值
                <defaultGoal />
                这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。
                    <resources>
                        <!--这个元素描述了项目相关或测试相关的所有资源路径 -->
                        <resource>
                            <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例
                                子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。
                                然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
                            <targetPath />
                            <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->
                            <filtering />  true/false
                            <!--描述存放资源的目录，该路径相对POM路径 -->
                            <directory />
                            <!--包含的模式列表，例如**/*.xml. -->
                            <includes />
                            <!--排除的模式列表，例如**/*.xml -->
                            <excludes />
                        </resource>
                    </resources>
                    这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。
                    <testResources>
                        这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明
                        <testResource>
                            同上
                            <targetPath />
                            <filtering />
                            <directory />
                            <includes />
                            <excludes />
                        </testResource>
                    </testResources>
                    构建产生的所有文件存放的目录
                    <directory />
                    产生的构件的文件名，默认值是${artifactId}-${version}。
                    <finalName />
                    当filtering开关打开时，使用到的过滤器属性文件列表
                    <filters />

                    使用的插件列表
                    <plugins>
                        plugin元素包含描述插件所需要的信息。
                        <plugin>
                            插件的groupId
                            <groupId />
                            插件的artifactId
                            <artifactId />
                            插件的version
                            <version />
                            true or false，是否装载插件扩展。默认false
                            <extensions />
                            用于配置execution目标，一个插件可以有多个目标。
                            <executions>
                                 一个执行
                                <execution>
                                    规定execution 的唯一标志
                                    <id />
                                    表示阶段，目标将会在什么阶段执行
                                    <phase />
                                    表示目标
                                    <goals />
                                    和上面的元素一样，设置false maven将会拒绝执行继承给子插件
                                    <inherited />
                                    表示此执行的配置属性
                                    <configuration />
                                </execution>
                            </executions>
                            <dependencies>
                                项目引入插件所需要的额外依赖
                                <dependency>
                                    ......
                                </dependency>
                            </dependencies>
                            <goals />
                            任何配置是否被传播到子项目
                            <inherited />
                            <configuration />
                        </plugin>
                    </plugins>
                    默认子pom继承的插件
                    <pluginManagement>
                        <plugins>
                            同上
                        </plugins>
                    </pluginManagement
            </build>

            模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径
            <modules />

            依赖和扩展的远程仓库列表.
            <repositories>
                包含需要连接到远程仓库的信息
                <repository>
                    如何处理远程仓库里发布版本的下载（稳定版本下载）
                    <releases>
                        true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。
                        <enabled />
                        该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。
                            这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），
                            或者never（从不）
                        <updatePolicy />
                        当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。
                        <checksumPolicy />
                    </releases>
                    如何处理远程仓库里快照版本的下载（测试版本下载）
                        快照版本 版本号后加一个 -SNAPSHOT
                    <snapshots>
                        true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。
                        <enabled />
                        该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。
                            这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），
                            或者never（从不）
                        <updatePolicy />
                        当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）
                        <checksumPolicy />
                    </snapshots>
                    远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库
                    <id />
                    远程仓库名称
                    <name />
                    远程仓库URL
                    <url />
                    用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。
                    <layout />
                </repository>
            </repositories>
            插件远程仓库的列表与配置
            <pluginRepositories>
                <pluginRepository>
                    <releases>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </releases>
                    <snapshots>
                        <enabled />
                        <updatePolicy />
                        <checksumPolicy />
                    </snapshots>
                    <id />
                    <name />
                    <url />
                    <layout />
                </pluginRepository>
            </pluginRepositories>

            该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。
                要获取更多信息，请看项目依赖机制。
            <dependencies>
                <!--参见dependencies/dependency元素 -->
                <dependency>
                    <groupId>org.apache.maven</groupId>
                    <artifactId>maven-artifact</artifactId>
                    <version>3.8.1</version>
                    依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。
                    类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。
                    如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。
                    <type>jar</type>
                    依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。
                        例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，
                            你就可以使用分类器来生成两个单独的JAR构件。
                    <classifier></classifier>
                    依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
                        - compile ：默认范围，用于编译
                        - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
                        - runtime: 在执行时需要使用
                        - test: 用于test任务时使用
                        - system: 需要外在提供相应的元素。通过systemPath来取得
                        - systemPath: 仅用于范围为system。提供相应的路径
                        - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用
                    <scope>test</scope>
                    scope为system时，提供相应的路径
                    <systemPath></systemPath>
                    当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。
                        此元素主要用于解决版本冲突问题
                    <exclusions>
                        <exclusion>
                            <artifactId>spring-core</artifactId>
                            <groupId>org.springframework</groupId>
                        </exclusion>
                    </exclusions>
                    可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目中显式的引用对C的依赖。
                        可选依赖阻断依赖的传递性。
                    <optional>true</optional>
                </dependency>
            </dependencies>
            承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖
                （必须描述group ID和 artifactID信息），如果group ID和artifact ID以外的一些信息没有描述，
                则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。
            <dependencyManagement>
                同上
                <dependencies>
                    <dependency>
                        ......
                    </dependency>
                </dependencies>
            </dependencyManagement>

            该元素描述使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。
            <reporting>
                true，则，网站不包括默认的报表。这包括"项目信息"菜单中的报表。
                <excludeDefaults />
                所有产生的报表存放到哪里。默认值是${project.build.directory}/site。
                <outputDirectory />
                使用的报表插件和他们的配置。
                <plugins>
                    <!--plugin元素包含描述报表插件需要的信息 -->
                    <plugin>
                        <!--报表插件在仓库里的group ID -->
                        <groupId />
                        <!--报表插件在仓库里的artifact ID -->
                        <artifactId />
                        <!--被使用的报表插件的版本（或版本范围） -->
                        <version />
                        <!--任何配置是否被传播到子项目 -->
                        <inherited />
                        <!--报表插件的配置 -->
                        <configuration />
                        <!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。
                            例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，
                                对应另一个执行目标 -->
                        <reportSets>
                            <!--表示报表的一个集合，以及产生该集合的配置 -->
                            <reportSet>
                                <!--报表集合的唯一标识符，POM继承时用到 -->
                                <id />
                                <!--产生报表集合时，被使用的报表的配置 -->
                                <configuration />
                                <!--配置是否被继承到子POMs -->
                                <inherited />
                                <!--这个集合里使用到哪些报表 -->
                                <reports />
                            </reportSet>
                        </reportSets>
                    </plugin>
                </plugins>
            </reporting>

            项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。
            <distributionManagement>
                <!--部署项目产生的构件到远程仓库需要的信息 -->
                <repository>
                    是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？
                    <uniqueVersion />
                    构件的id
                    <id>banseon-maven2</id>
                    构件的名称
                    <name>banseon maven2</name>
                    构件的URL
                    <url>file://${basedir}/target/deploy</url>
                    构件的的布局方式
                    <layout />
                </repository>
                构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库
                <snapshotRepository>
                    同上
                    <uniqueVersion />
                    <id>banseon-maven2</id>
                    <name>Banseon-maven2 Snapshot Repository</name>
                    <url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>
                    <layout />
                </snapshotRepository>
                <!--部署项目的网站需要的信息 -->
                <site>
                    <!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 -->
                    <id>banseon-site</id>
                    <!--部署位置的名称 -->
                    <name>business api website</name>
                    <!--部署位置的URL，按protocol://hostname/path形式 -->
                    <url>
                        scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
                    </url>
                </site>
                项目下载页面的URL。如果没有该元素，用户应该参考主页。
                    使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。
                <downloadUrl />
                如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。
                <relocation>
                    <!--构件新的group ID -->
                    <groupId />
                    <!--构件新的artifact ID -->
                    <artifactId />
                    <!--构件新的版本号 -->
                    <version />
                    <!--显示给用户的，关于移动的额外信息，例如原因。 -->
                    <message />
                </relocation>
                给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。
                    有效的值有：
                        none（默认），
                        converted（仓库管理员从Maven 1 POM转换过来），
                        partner（直接从伙伴Maven 2仓库同步过来），
                        deployed（从Maven 2实例部 署），
                        verified（被核实时正确的和最终的）。
                <status />
            </distributionManagement>

            以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。
            <properties>
                <键名>值</键名>。
            </properties>

            在列的项目构建profile，如果被激活，会修改构建处理
            <profiles>
                根据环境参数或命令行参数激活某个构建处理
                <profile>
                    构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。
                    <id />
                        值为true/false  激活profile,或者为一下设置时激活
                    <activation>
                        默认激活状态
                        <activeByDefault />
                        当匹配的jdk被检测到，profile被激活。
                            例如，1.4激活JDK1.4，1.4.0_2
                        <jdk />
                        检测操作系统激活
                        <os>
                            <!--激活profile的操作系统的名字 -->
                            <name>Windows XP</name>
                            <!--激活profile的操作系统所属家族(如 'windows') -->
                            <family>Windows</family>
                            <!--激活profile的操作系统体系结构 -->
                            <arch>x86</arch>
                            <!--激活profile的操作系统版本 -->
                            <version>5.1.2600</version>
                        </os>
                        通过属性名与值进行激活，如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，
                        Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段
                        <property>
                            <!--激活profile的属性的名称 -->
                            <name>mavenVersion</name>
                            <!--激活profile的属性的值 -->
                            <value>2.0.3</value>
                        </property>
                        <file>
                            <!--如果指定的文件存在，则激活profile。 -->
                            <exists>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                            </exists>
                            <!--如果指定的文件不存在，则激活profile。 -->
                            <missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/
                            </missing>
                        </file>
                    </activation>

                    可以配置以上所有配置选项

                </profile>
            </profiles>

        profile激活顺序
            项目级 ： 项目中profile配置的激活方式
            %USER_HOME%/.m2/settings.xml ： 在本地仓库中配置的
                  <activeProfiles>
                    <activeProfile> profile的id </activeProfile>
                  </activeProfiles>
            %M2_HOME%/conf/settings.xml ： 最高级，可以替换以上两个
                  <activeProfiles>
                    <activeProfile> profile的id </activeProfile>
                  </activeProfiles>

    可配置项
        project dependencies 项目依赖
        plugins 插件
        goals 执行目标
        build profiles 项目构建 profile
        project version 项目版本
        developers 项目开发者列表
        mailing list 相关邮件列表信息
    SUPER POM
        所有的pom都继承与一个公共的父POM，可以用mvn help:effective-pom 在项目下查看给Super POM 的内容
